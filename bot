const fs = require('fs');
const { token } = require('./config.json');
const { Client, Events, GatewayIntentBits, SlashCommandBuilder, EmbedBuilder, Embed, ActivityType } = require('discord.js');
 
const client = new Client({ intents: [GatewayIntentBits.Guilds] });
const deliveredOrders = loadDeliveredOrdersFromFile();
 
const deliveredOrdersFile = 'delivered_orders.json'; // Saved Order-IDs
const deliveredOrdersChannelID = "1136769156201595002"; // Delivery Orders Command Channel
const red = '#Ff5348'; // Color Red
const green = '#90EE90'; // Color Green
const blue = '#339af0'; // Color Blue
const staffRole = '1136766314791309382'; // Staff Role
const WatchingAt = 'HeavenMarket.net'; // Watching Name (Activity)
 
function saveDeliveredOrdersToFile() {
    const data = JSON.stringify([...deliveredOrders]);
    fs.writeFileSync(deliveredOrdersFile, data);
}
 
function loadDeliveredOrdersFromFile() {
    try {
        const data = fs.readFileSync(deliveredOrdersFile, 'utf8');
        return new Set(JSON.parse(data));
    } catch (err) {
        return new Set();
    }
}
 
client.once(Events.ClientReady, c => {
    console.log(`Logged in as ${c.user.tag}`);
 
    const deliver = new SlashCommandBuilder()
        .setName('deliver')
        .setDescription('Mark an order as delivered')
        .addStringOption(option =>
            option
                .setName('order-id')
                .setDescription('Insert the Order-ID')
                .setRequired(true)
        )
 
    const undeliver = new SlashCommandBuilder()
        .setName('undeliver')
        .setDescription('Mark a delivered Order as undelivered')
        .addStringOption(option => 
            option
                .setName('order-id')
                .setDescription('Insert the Order-ID')
                .setRequired(true)
        )
 
    const checkorder = new SlashCommandBuilder()
        .setName('checkorder')
        .setDescription('Check the status of a specific Order-ID')
        .addStringOption(option =>
            option
                .setName('order-id')
                .setDescription('Insert the Order-ID')
                .setRequired(true)
        )
 
    const orderlist = new SlashCommandBuilder()
        .setName('orderlist')
        .setDescription('A list with all delivered Order-IDs')
 
    client.application.commands.create(deliver);
    client.application.commands.create(undeliver);
    client.application.commands.create(checkorder);
    client.application.commands.create(orderlist);
})
 
client.on(Events.InteractionCreate, interaction => {
    if(!interaction.isChatInputCommand()) return;
 
    const allowedRole = interaction.member.roles.cache.has(staffRole);
    if(!allowedRole) {
        const missingPermissions = new EmbedBuilder()
            .setTitle('Missing Permissions')
            .setDescription(`⠀\n**You do not have the necessary roles to execute the command!**\n⠀`)
            .setTimestamp()
            .setColor(red)
            .setThumbnail(client.user.displayAvatarURL())
            .setFooter({ text: client.user.username, iconURL: client.user.avatarURL() });
        interaction.reply({ embeds: [missingPermissions], ephemeral: true });
        return;
    }
 
    if(interaction.commandName === "deliver") {
        const orderId = interaction.options.getString('order-id');
        if (deliveredOrders.has(orderId)) {
            const errorEmbed = new EmbedBuilder()
                .setTitle('Order could not be delivered')
                .setDescription(`⠀\n${orderId} is already delivered!\n\n☑️ Order already delivered ☑️\n⠀`)
                .setTimestamp()
                .setColor(red)
                .setThumbnail(client.user.displayAvatarURL())
                .setFooter({ text: client.user.username, iconURL: client.user.avatarURL() });
            interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        } else {
            deliveredOrders.add(orderId);
            saveDeliveredOrdersToFile();
            const embed = new EmbedBuilder()
                .setTitle('Order delivered')
                .setDescription(`⠀\n${orderId} was successfully marked as delivered!\n\n✅ Order delivered ✅\n⠀`)
                .setTimestamp()
                .setColor(blue)
                .setThumbnail(client.user.displayAvatarURL())
                .setFooter({ text: client.user.username, iconURL: client.user.avatarURL() });
            interaction.reply({ embeds: [embed], ephemeral: true });
            const targetChannel = client.channels.cache.get(deliveredOrdersChannelID);
            targetChannel.send({ embeds: [embed] });
        }
    } else if (interaction.commandName === "undeliver") {
        const orderId = interaction.options.getString('order-id');
        if (deliveredOrders.has(orderId)) {
            deliveredOrders.delete(orderId);
            saveDeliveredOrdersToFile();
            const undeliveredEmbed = new EmbedBuilder()
                .setTitle('Order undelivered')
                .setDescription(`⠀\n${orderId} was successfully marked as undelivered!\n\n⛔ Order undelivered ⛔\n⠀`)
                .setTimestamp()
                .setColor(green)
                .setThumbnail(client.user.displayAvatarURL())
                .setFooter({ text: client.user.username, iconURL: client.user.avatarURL() });
            interaction.reply({ embeds: [undeliveredEmbed], ephemeral: true });
            const targetChannel = client.channels.cache.get(deliveredOrdersChannelID);
            targetChannel.send({ embeds: [undeliveredEmbed] });
        } else {
            const errorEmbedUndeliver = new EmbedBuilder()
                .setTitle('Order was not found')
                .setDescription(`⠀\n${orderId} was not found on the list.\n\n❌ Order-ID is not on the list ❌\n⠀`)
                .setTimestamp()
                .setColor(red)
                .setThumbnail(client.user.displayAvatarURL())
                .setFooter({ text: client.user.username, iconURL: client.user.avatarURL() });
            interaction.reply({ embeds: [errorEmbedUndeliver], ephemeral: true });
        }
    } else if (interaction.channelId === deliveredOrdersChannelID) {
        if (interaction.commandName === "checkorder") {
            const orderId = interaction.options.getString('order-id');
            if (deliveredOrders.has(orderId)) {
                const checkorderEmbed = new EmbedBuilder()
                    .setTitle('Order found')
                    .setDescription(`⠀\n${orderId} was found on the list.\n\n⚠️ Order was already delivered ⚠️\n⠀`)
                    .setTimestamp()
                    .setColor(green)
                    .setThumbnail(client.user.displayAvatarURL()) 
                    .setFooter({ text: client.user.username, iconURL: client.user.avatarURL() });
                interaction.reply({ embeds: [checkorderEmbed] });
            } else {
                const errorEmbedCheckOrder = new EmbedBuilder()
                    .setTitle('Order was not found')
                    .setDescription(`⠀\n${orderId} was not found on the list.\n\n❗ Order is not delivered / Wrong Order-ID ❗\n⠀`)
                    .setTimestamp()
                    .setColor(red)
                    .setThumbnail(client.user.displayAvatarURL())
                    .setFooter({ text: client.user.username, iconURL: client.user.avatarURL() });
                interaction.reply({ embeds: [errorEmbedCheckOrder] });
            }
        } else if (interaction.channelId === deliveredOrdersChannelID) {
            if (interaction.commandName === "orderlist") {
                const orderIds = [...deliveredOrders];
                if (orderIds.length === 0) {
                    const errorListEmbed = new EmbedBuilder()
                        .setTitle('Order List')
                        .setDescription(`⠀\nNo Order-IDs were found!\n⠀`)
                        .setTimestamp()
                        .setColor(red)
                        .setThumbnail(client.user.displayAvatarURL())
                        .setFooter({ text: client.user.username, iconURL: client.user.avatarURL() });
                    interaction.reply({ embeds: [errorListEmbed], ephemeral: true });
                } else {
                    const listEmbed = new EmbedBuilder()
                        .setTitle('Order List')
                        .setDescription(`⠀\n${orderIds.join("\n")}\n⠀`)
                        .setTimestamp()
                        .setColor(blue)
                        .setThumbnail(client.user.displayAvatarURL())
                        .setFooter({ text: client.user.username, iconURL: client.user.avatarURL() });
                    interaction.reply({ embeds: [listEmbed], ephemeral: true });
                }
            } else {
                const onlyInDesiredChannel = new EmbedBuilder()
                    .setTitle('Wrong Channel')
                    .setDescription(`⠀\n**You can't use the command here.**\n\nPlease head over to <#1136769156201595002>!\n⠀`)
                    .setTimestamp()
                    .setColor(red)
                    .setThumbnail(client.user.displayAvatarURL())
                    .setFooter({ text: client.user.username, iconURL: client.user.avatarURL() });
                interaction.reply({ embeds: [onlyInDesiredChannel], ephemeral: true });
            }
        }
    } else {
        const onlyInDesiredChannel = new EmbedBuilder()
            .setTitle('Wrong Channel')
            .setDescription(`⠀\n**You can't use the command here.**\n\nPlease head over to <#1136769156201595002>!\n⠀`)
            .setTimestamp()
            .setColor(red)
            .setThumbnail(client.user.displayAvatarURL())
            .setFooter({ text: client.user.username, iconURL: client.user.avatarURL() });
        interaction.reply({ embeds: [onlyInDesiredChannel], ephemeral: true });
    } 
});
 
client.login(token).then(() => {
    client.user.setPresence ({ activities: [{ name: WatchingAt, type: ActivityType.Watching }], status: 'online' });
})
